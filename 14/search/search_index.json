{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Percona Distribution for PostgreSQL 14 Documentation \u00b6 Percona Distribution for PostgreSQL is a collection of tools to assist you in managing your PostgreSQL database system: it installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently: pg_repack rebuilds PostgreSQL database objects pgAudit provides detailed session or object audit logging via the standard PostgreSQL logging facility pgAudit set_user - The set_user part of pgAudit extension provides an additional layer of logging and control when unprivileged users must escalate themselves to superuser or object owner roles in order to perform needed maintenance tasks. pgBackRest is a backup and restore solution for PostgreSQL Patroni is an HA (High Availability) solution for PostgreSQL. pg_stat_monitor (Tech Preview Feature 1 ) collects and aggregates statistics for PostgreSQL and provides histogram information. PgBouncer - a lightweight connection pooler for PostgreSQL pgBadger - a fast PostgreSQL Log Analyzer. wal2json - a PostgreSQL logical decoding JSON output plugin. A collection of additional PostgreSQL contrib extensions Seealso Blog Posts pgBackRest - A Great Backup Solution and a Wonderful Year of Growth Securing PostgreSQL as an Enterprise-Grade Environment Percona Distribution for PostgreSQL is also shipped with the libpq library. It contains \u201ca set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries.\u201d 2 Installation and Upgrade \u00b6 Installing Percona Distribution for PostgreSQL Minor Upgrade of Percona Distribution for PostgreSQL Extensions \u00b6 pg_stat_monitor Uninstall \u00b6 Uninstalling Percona Distribution for PostgreSQL Release Notes \u00b6 Release notes Reference \u00b6 Licensing Tech Preview Features are not yet ready for enterprise use and are not included in support via SLA (Service License Agreement). They are included in this release so that users can provide feedback prior to the full release of the feature in a future release (or removal of the feature if it is deemed not useful). This functionality can change (APIs, CLIs, etc.) from tech preview to GA. \u21a9 https://www.postgresql.org/docs/13/libpq.html \u21a9","title":"Percona Distribution for PostgreSQL 14 Documentation"},{"location":"index.html#percona-distribution-for-postgresql-14-documentation","text":"Percona Distribution for PostgreSQL is a collection of tools to assist you in managing your PostgreSQL database system: it installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently: pg_repack rebuilds PostgreSQL database objects pgAudit provides detailed session or object audit logging via the standard PostgreSQL logging facility pgAudit set_user - The set_user part of pgAudit extension provides an additional layer of logging and control when unprivileged users must escalate themselves to superuser or object owner roles in order to perform needed maintenance tasks. pgBackRest is a backup and restore solution for PostgreSQL Patroni is an HA (High Availability) solution for PostgreSQL. pg_stat_monitor (Tech Preview Feature 1 ) collects and aggregates statistics for PostgreSQL and provides histogram information. PgBouncer - a lightweight connection pooler for PostgreSQL pgBadger - a fast PostgreSQL Log Analyzer. wal2json - a PostgreSQL logical decoding JSON output plugin. A collection of additional PostgreSQL contrib extensions Seealso Blog Posts pgBackRest - A Great Backup Solution and a Wonderful Year of Growth Securing PostgreSQL as an Enterprise-Grade Environment Percona Distribution for PostgreSQL is also shipped with the libpq library. It contains \u201ca set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries.\u201d 2","title":"Percona Distribution for PostgreSQL 14 Documentation"},{"location":"index.html#installation-and-upgrade","text":"Installing Percona Distribution for PostgreSQL Minor Upgrade of Percona Distribution for PostgreSQL","title":"Installation and Upgrade"},{"location":"index.html#extensions","text":"pg_stat_monitor","title":"Extensions"},{"location":"index.html#uninstall","text":"Uninstalling Percona Distribution for PostgreSQL","title":"Uninstall"},{"location":"index.html#release-notes","text":"Release notes","title":"Release Notes"},{"location":"index.html#reference","text":"Licensing Tech Preview Features are not yet ready for enterprise use and are not included in support via SLA (Service License Agreement). They are included in this release so that users can provide feedback prior to the full release of the feature in a future release (or removal of the feature if it is deemed not useful). This functionality can change (APIs, CLIs, etc.) from tech preview to GA. \u21a9 https://www.postgresql.org/docs/13/libpq.html \u21a9","title":"Reference"},{"location":"extensions.html","text":"Extensions \u00b6 pg_stat_monitor","title":"Extensions"},{"location":"extensions.html#extensions","text":"pg_stat_monitor","title":"Extensions"},{"location":"installation-and-update.html","text":"Installation and Upgrade \u00b6 This section provides instructions on how to: install Percona Distribution for PostgreSQL 14; update Percona Distribution for PostgreSQL to the latest minor version; upgrade Percona Distribution for PostgreSQL to a new major version.","title":"Installation and Upgrade"},{"location":"installation-and-update.html#installation-and-upgrade","text":"This section provides instructions on how to: install Percona Distribution for PostgreSQL 14; update Percona Distribution for PostgreSQL to the latest minor version; upgrade Percona Distribution for PostgreSQL to a new major version.","title":"Installation and Upgrade"},{"location":"installing.html","text":"Installing Percona Distribution for PostgreSQL \u00b6 Percona provides installation packages in DEB and RPM format for 64-bit Linux distributions. Find the full list of supported platforms on the Percona Software and Platform Lifecycle page . Like many other Percona products, we recommend installing Percona Distribution for PostgreSQL from Percona repositories by using the percona-release utility. The percona-release utility automatically enables the required repository for you so you can easily install and update Percona Distribution for PostgreSQL packages and their dependencies through the package manager of your operating system. The installation process includes the following steps: Install percona-release Enable the repository Install the packages Start the postgresql service Connect to the server Repositories overview \u00b6 There are two repositories available for Percona Distribution for PostgreSQL. We recommend installing Percona Distribution for PostgreSQL from the Major Release repository (e.g. ppg-14 ) as it includes the latest version packages. Whenever a package is updated, the package manager of your operating system detects that and prompts you to update. As long as you update all Distribution packages at the same time, you can ensure that the packages you\u2019re using have been tested and verified by Percona. The Minor Release repository includes a particular minor release of the database and all of the packages that were tested and verified to work with that minor release (e.g. ppg-14.0 ). You may choose to install Percona Distribution for PostgreSQL from the Minor Release repository if you have decided to standardize on a particular release which has passed rigorous testing procedures and which has been verified to work with your applications. This allows you to deploy to a new host and ensure that you\u2019ll be using the same version of all the Distribution packages, even if newer releases exist in other repositories. The disadvantage of using a Minor Release repository is that you are locked in this particular release. When potentially critical fixes are released in a later minor version of the database, you will not be prompted for an upgrade by the package manager of your operating system. You would need to change the configured repository in order to install the upgrade. Install percona-release \u00b6 Install percona-release utility. If you have installed it before, update it to the latest version. Enable the repository \u00b6 As soon as percona-release is installed or up-to-date, enable the repository for Percona Distribution for PostgreSQL ( ppg-14 ). We recommend using the set up command as it enables the specified repository and updates the platform\u2019s package manager database. To install the latest version of Percona Distribution for PostgreSQL, enable the Major Release repository using the following command: $ sudo percona-release setup ppg-14 To install a specific minor version of Percona Distribution for PostgreSQL, enable the Minor release repository. For example, to install Percona Distribution for PostgreSQL 14.1, enable the ppg-14.1 repository using the following command: $ sudo percona-release setup ppg-14.1 Install Percona Distribution for PostgreSQL packages \u00b6 After you\u2019ve installed percona-release and enabled the desired repository, install Percona Distribution for PostgreSQL using the commands of your package manager (the procedure differs depending on the package manager of your operating system). On Debian and Ubuntu using apt \u00b6 Note On Debian and other systems that use the apt package manager, such as Ubuntu, components of Percona Distribution for PostgreSQL 14 can only be installed together with the server shipped by Percona (percona-postgresql-14). If you wish to use Percona Distribution for PostgreSQL, uninstall the PostgreSQL package provided by your distribution (postgresql-14) and then install the chosen components from Percona Distribution for PostgreSQL. Install the percona-postgresql-14 package using apt install . $ sudo apt install percona-postgresql-14 Note that this package will not install the components. Use the following commands to install components\u2019 packages: Install pg_repack : $ sudo apt install percona-postgresql-14-repack Install pgAudit : $ sudo apt install percona-postgresql-14-pgaudit Install pgBackRest : $ sudo apt install percona-pgbackrest Install Patroni : $ sudo apt install percona-patroni Install pg_stat_monitor Install pgBouncer : $ sudo apt install percona-pgbouncer Install pgAudit-set_user : $ sudo apt install percona-pgaudit14-set-user Install pgBadger : $ sudo apt install percona-pgbadger Install wal2json : $ sudo apt install percona-postgresql-14-wal2json Install PostgreSQL contrib extensions: $ sudo apt install percona-postgresql-contrib Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to Enabling extensions . Starting the service \u00b6 The installation process automatically initializes the default database. Thus, to start Percona Distribution for PostgreSQL, use the following command: $ sudo pg_ctlcluster 14 main start Next steps: connect to PostgreSQL . On Red Hat Enterprise Linux and CentOS using yum \u00b6 Platform Specific Notes \u00b6 If you intend to install Percona Distribution for PostgreSQL on Red Hat Enterprise Linux v8 / CentOS 8, disable the postgresql and llvm-toolset modules: $ sudo dnf module disable postgresql llvm-toolset On CentOS 7, you should install the epel-release package: $ sudo yum -y install epel-release $ sudo yum repolist Install the percona-postgresql-14 package using yum install . $ sudo yum install percona-postgresql14-server Note that this package will not install the components. Use the following commands to install components\u2019 packages: Install pg_repack : $ sudo yum install percona-pg_repack14 Install pgaudit : $ sudo yum install percona-pgaudit Install pgBackRest : $ sudo yum install percona-pgbackrest Install Patroni : $ sudo yum install percona-patroni Install pg_stat_monitor : Install pgBouncer : $ sudo yum install percona-pgbouncer Install pgAudit-set_user : $ sudo yum install percona-pgaudit14_set_user Install pgBadger : $ sudo yum install percona-pgbadger Install wal2json : $ sudo yum install percona-wal2json14 Install PostgreSQL contrib extensions: $ sudo yum install percona-postgresql14-contrib Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to Enabling extensions . Starting the service \u00b6 After the installation, the default database storage is not automatically initialized. To complete the installation and start Percona Distribution for PostgreSQL, initialize the database using the following command: /usr/pgsql-13/bin/postgresql-14-setup initdb Start the PostgreSQL service: $ sudo systemctl start postgresql-14 Enabling extensions \u00b6 Some extensions require additional configuration before using them with Percona Distribution for PostgreSQL. This sections provides configuration instructions per extension. Patroni While setting up a high availability PostgreSQL cluster with Patroni, you will need the following: Configure Patroni on every postresql instance. The configuration file is supplied with percona-patroni package and is available at the following path: /etc/postgresql.yml for Debian and Ubuntu /usr/share/doc/percona-patroni/postgres0.yml for Red Hat Enterprise Linux and CentOS Install and configure Distributed Configuration Store (DCS). Patroni supports such DCSs as ETCD, zookeeper, Kubernetes though ETCD is the most popular one. It is available upstream as DEB packages for Debian 10 and Ubuntu 18.04, 20.04. For Debian 9 (\u201cstretch\u201d), a DEB package for ETCD is available within Percona Distribution for PostreSQL. You can install it using the following command: $ apt install etcd For CentOS 8, RPM packages for ETCD is available within Percona Distribution for PostreSQL. You can install it using the following command: $ yum install etcd python3-python-etcd Install and configure HAProxy . Seealso Patroni documentation Percona Blog: PostgreSQL HA with Patroni: Your Turn to Test Failure Scenarios pgBadger Enable the following options in postgresql.conf configuration file before starting the service: log_min_duration_statement = 0 log_line_prefix = '%t [%p]: ' log_checkpoints = on log_connections = on log_disconnections = on log_lock_waits = on log_temp_files = 0 log_autovacuum_min_duration = 0 log_error_verbosity = default For details about each option, see pdBadger documentation . pgAudit set-user Add the set-user to shared_preload_libraries in postgresql.conf . The recommended way is to use the ALTER SYSTEM command. Connect to psql and use the following command: $ ALTER SYSTEM SET shared_preload_libraries = 'set-user'; Start / restart the server to apply the configuration. You can fine-tune user behavior with the custom parameters supplied with the extension. wal2json After the installation, enable the following option in postgresql.conf configuration file before starting the service: wal_level = logical Connect to the PostgreSQL server \u00b6 By default, postgres user and postgres database are created in PostgreSQL upon its installation and initialization. This allows you to connect to the database as the postgres user. $ sudo su postgres Open the PostgreSQL interactive terminal: $ psql Hint You can connect to psql as the postgres user in one go: $ sudo su postgres psql To exit the psql terminal, use the following command: $ \\q","title":"Installing Percona Distribution for PostgreSQL"},{"location":"installing.html#installing-percona-distribution-for-postgresql","text":"Percona provides installation packages in DEB and RPM format for 64-bit Linux distributions. Find the full list of supported platforms on the Percona Software and Platform Lifecycle page . Like many other Percona products, we recommend installing Percona Distribution for PostgreSQL from Percona repositories by using the percona-release utility. The percona-release utility automatically enables the required repository for you so you can easily install and update Percona Distribution for PostgreSQL packages and their dependencies through the package manager of your operating system. The installation process includes the following steps: Install percona-release Enable the repository Install the packages Start the postgresql service Connect to the server","title":"Installing Percona Distribution for PostgreSQL"},{"location":"installing.html#repositories-overview","text":"There are two repositories available for Percona Distribution for PostgreSQL. We recommend installing Percona Distribution for PostgreSQL from the Major Release repository (e.g. ppg-14 ) as it includes the latest version packages. Whenever a package is updated, the package manager of your operating system detects that and prompts you to update. As long as you update all Distribution packages at the same time, you can ensure that the packages you\u2019re using have been tested and verified by Percona. The Minor Release repository includes a particular minor release of the database and all of the packages that were tested and verified to work with that minor release (e.g. ppg-14.0 ). You may choose to install Percona Distribution for PostgreSQL from the Minor Release repository if you have decided to standardize on a particular release which has passed rigorous testing procedures and which has been verified to work with your applications. This allows you to deploy to a new host and ensure that you\u2019ll be using the same version of all the Distribution packages, even if newer releases exist in other repositories. The disadvantage of using a Minor Release repository is that you are locked in this particular release. When potentially critical fixes are released in a later minor version of the database, you will not be prompted for an upgrade by the package manager of your operating system. You would need to change the configured repository in order to install the upgrade.","title":"Repositories overview"},{"location":"installing.html#install-percona-release","text":"Install percona-release utility. If you have installed it before, update it to the latest version.","title":"Install percona-release"},{"location":"installing.html#enable-the-repository","text":"As soon as percona-release is installed or up-to-date, enable the repository for Percona Distribution for PostgreSQL ( ppg-14 ). We recommend using the set up command as it enables the specified repository and updates the platform\u2019s package manager database. To install the latest version of Percona Distribution for PostgreSQL, enable the Major Release repository using the following command: $ sudo percona-release setup ppg-14 To install a specific minor version of Percona Distribution for PostgreSQL, enable the Minor release repository. For example, to install Percona Distribution for PostgreSQL 14.1, enable the ppg-14.1 repository using the following command: $ sudo percona-release setup ppg-14.1","title":"Enable the repository"},{"location":"installing.html#install-percona-distribution-for-postgresql-packages","text":"After you\u2019ve installed percona-release and enabled the desired repository, install Percona Distribution for PostgreSQL using the commands of your package manager (the procedure differs depending on the package manager of your operating system).","title":"Install Percona Distribution for PostgreSQL packages"},{"location":"installing.html#on-debian-and-ubuntu-using-apt","text":"Note On Debian and other systems that use the apt package manager, such as Ubuntu, components of Percona Distribution for PostgreSQL 14 can only be installed together with the server shipped by Percona (percona-postgresql-14). If you wish to use Percona Distribution for PostgreSQL, uninstall the PostgreSQL package provided by your distribution (postgresql-14) and then install the chosen components from Percona Distribution for PostgreSQL. Install the percona-postgresql-14 package using apt install . $ sudo apt install percona-postgresql-14 Note that this package will not install the components. Use the following commands to install components\u2019 packages: Install pg_repack : $ sudo apt install percona-postgresql-14-repack Install pgAudit : $ sudo apt install percona-postgresql-14-pgaudit Install pgBackRest : $ sudo apt install percona-pgbackrest Install Patroni : $ sudo apt install percona-patroni Install pg_stat_monitor Install pgBouncer : $ sudo apt install percona-pgbouncer Install pgAudit-set_user : $ sudo apt install percona-pgaudit14-set-user Install pgBadger : $ sudo apt install percona-pgbadger Install wal2json : $ sudo apt install percona-postgresql-14-wal2json Install PostgreSQL contrib extensions: $ sudo apt install percona-postgresql-contrib Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to Enabling extensions .","title":"On Debian and Ubuntu using apt"},{"location":"installing.html#starting-the-service","text":"The installation process automatically initializes the default database. Thus, to start Percona Distribution for PostgreSQL, use the following command: $ sudo pg_ctlcluster 14 main start Next steps: connect to PostgreSQL .","title":"Starting the service"},{"location":"installing.html#on-red-hat-enterprise-linux-and-centos-using-yum","text":"","title":"On Red Hat Enterprise Linux and CentOS using yum"},{"location":"installing.html#platform-specific-notes","text":"If you intend to install Percona Distribution for PostgreSQL on Red Hat Enterprise Linux v8 / CentOS 8, disable the postgresql and llvm-toolset modules: $ sudo dnf module disable postgresql llvm-toolset On CentOS 7, you should install the epel-release package: $ sudo yum -y install epel-release $ sudo yum repolist Install the percona-postgresql-14 package using yum install . $ sudo yum install percona-postgresql14-server Note that this package will not install the components. Use the following commands to install components\u2019 packages: Install pg_repack : $ sudo yum install percona-pg_repack14 Install pgaudit : $ sudo yum install percona-pgaudit Install pgBackRest : $ sudo yum install percona-pgbackrest Install Patroni : $ sudo yum install percona-patroni Install pg_stat_monitor : Install pgBouncer : $ sudo yum install percona-pgbouncer Install pgAudit-set_user : $ sudo yum install percona-pgaudit14_set_user Install pgBadger : $ sudo yum install percona-pgbadger Install wal2json : $ sudo yum install percona-wal2json14 Install PostgreSQL contrib extensions: $ sudo yum install percona-postgresql14-contrib Some extensions require additional setup in order to use them with Percona Distribution for PostgreSQL. For more information, refer to Enabling extensions .","title":"Platform Specific Notes"},{"location":"installing.html#starting-the-service_1","text":"After the installation, the default database storage is not automatically initialized. To complete the installation and start Percona Distribution for PostgreSQL, initialize the database using the following command: /usr/pgsql-13/bin/postgresql-14-setup initdb Start the PostgreSQL service: $ sudo systemctl start postgresql-14","title":"Starting the service"},{"location":"installing.html#enabling-extensions","text":"Some extensions require additional configuration before using them with Percona Distribution for PostgreSQL. This sections provides configuration instructions per extension. Patroni While setting up a high availability PostgreSQL cluster with Patroni, you will need the following: Configure Patroni on every postresql instance. The configuration file is supplied with percona-patroni package and is available at the following path: /etc/postgresql.yml for Debian and Ubuntu /usr/share/doc/percona-patroni/postgres0.yml for Red Hat Enterprise Linux and CentOS Install and configure Distributed Configuration Store (DCS). Patroni supports such DCSs as ETCD, zookeeper, Kubernetes though ETCD is the most popular one. It is available upstream as DEB packages for Debian 10 and Ubuntu 18.04, 20.04. For Debian 9 (\u201cstretch\u201d), a DEB package for ETCD is available within Percona Distribution for PostreSQL. You can install it using the following command: $ apt install etcd For CentOS 8, RPM packages for ETCD is available within Percona Distribution for PostreSQL. You can install it using the following command: $ yum install etcd python3-python-etcd Install and configure HAProxy . Seealso Patroni documentation Percona Blog: PostgreSQL HA with Patroni: Your Turn to Test Failure Scenarios pgBadger Enable the following options in postgresql.conf configuration file before starting the service: log_min_duration_statement = 0 log_line_prefix = '%t [%p]: ' log_checkpoints = on log_connections = on log_disconnections = on log_lock_waits = on log_temp_files = 0 log_autovacuum_min_duration = 0 log_error_verbosity = default For details about each option, see pdBadger documentation . pgAudit set-user Add the set-user to shared_preload_libraries in postgresql.conf . The recommended way is to use the ALTER SYSTEM command. Connect to psql and use the following command: $ ALTER SYSTEM SET shared_preload_libraries = 'set-user'; Start / restart the server to apply the configuration. You can fine-tune user behavior with the custom parameters supplied with the extension. wal2json After the installation, enable the following option in postgresql.conf configuration file before starting the service: wal_level = logical","title":"Enabling extensions"},{"location":"installing.html#connect-to-the-postgresql-server","text":"By default, postgres user and postgres database are created in PostgreSQL upon its installation and initialization. This allows you to connect to the database as the postgres user. $ sudo su postgres Open the PostgreSQL interactive terminal: $ psql Hint You can connect to psql as the postgres user in one go: $ sudo su postgres psql To exit the psql terminal, use the following command: $ \\q","title":"Connect to the PostgreSQL server"},{"location":"licensing.html","text":"Licensing \u00b6 Percona Distribution for PostgreSQL is licensed under the PostgreSQL license and licenses of all components included in the Distribution. Documentation Licensing \u00b6 Percona Distribution for PostgreSQL documentation is licensed under the PostgreSQL license .","title":"Licensing"},{"location":"licensing.html#licensing","text":"Percona Distribution for PostgreSQL is licensed under the PostgreSQL license and licenses of all components included in the Distribution.","title":"Licensing"},{"location":"licensing.html#documentation-licensing","text":"Percona Distribution for PostgreSQL documentation is licensed under the PostgreSQL license .","title":"Documentation Licensing"},{"location":"major-upgrade.html","text":"Upgrading Percona Distribution for PostgreSQL from 13 to 14 \u00b6 This document describes the in-place upgrade of Percona Distribution for PostgreSQL using the pg_upgrade tool. The in-place upgrade means installing a new version without removing the old version and keeping the data files on the server. Seealso pg_upgrade Documentation Similar to installing, we recommend you to upgrade Percona Distribution for PostgreSQL from Percona repositories. Important A major upgrade is a risky process because of many changes between versions and issues that might occur during or after the upgrade. Therefore, make sure to back up your data first. The backup tools are out of scope of this document. Use the backup tool of your choice. The general in-place upgrade flow for Percona Distribution for PostgreSQL is the following: Install Percona Distribution for PostgreSQL 14 packages. Stop the PostgreSQL service. Check the upgrade without modifying the data. Upgrade Percona Distribution for PostgreSQL. Start PostgreSQL service. Execute the analyze_new_cluster.sh script to generate statistics so the system is usable. Delete old packages and configuration files. The exact steps may differ depending on the package manager of your operating system. On Debian and Ubuntu using apt \u00b6 Important Run all commands as root or via sudo . Install Percona Distribution for PostgreSQL 14 packages. Enable Percona repository using the percona-release utility: $ sudo percona-release setup ppg-14 Install Percona Distribution for PostgreSQL 14 package: $ sudo apt install percona-postgresql-14 Install the components: $ sudo apt install percona-postgresql-14-repack \\ percona-postgresql-14-pgaudit \\ percona-pgbackrest \\ percona-patroni \\ percona-pgbadger \\ percona-pgaudit14-set-user \\ percona-pgbadger \\ percona-postgresql-14-wal2json \\ percona-pg-stat-monitor14 \\ percona-postgresql-contrib Seealso Percona Documentation: Percona Software Repositories Documentation Installing Percona Distribution for PostgreSQL Stop the postgresql service. $ sudo systemctl stop postgresql.service This stops both Percona Distribution for PostgreSQL 13 and 14. Run the database upgrade. Log in as the postgres user. $ sudo su postgres Change the current directory to the tmp directory where logs and some scripts will be recorded: cd tmp/ Check the ability to upgrade Percona Distribution for PostgreSQL from 13 to 14: $ /usr/lib/postgresql/14/bin/pg_upgrade --old-datadir=/var/lib/postgresql/13/main \\ --new-datadir=/var/lib/postgresql/14/main \\ --old-bindir=/usr/lib/postgresql/13/bin \\ --new-bindir=/usr/lib/postgresql/14/bin \\ --old-options '-c config_file=/etc/postgresql/13/main/postgresql.conf' \\ --new-options '-c config_file=/etc/postgresql/14/main/postgresql.conf' \\ --check The --check flag here instructs pg_upgrade to only check the upgrade without changing any data. Sample output Performing Consistency Checks ----------------------------- Checking cluster versions ok Checking database user is the install user ok Checking database connection settings ok Checking for prepared transactions ok Checking for reg* data types in user tables ok Checking for contrib/isn with bigint-passing mismatch ok Checking for tables WITH OIDS ok Checking for invalid \"sql_identifier\" user columns ok Checking for presence of required libraries ok Checking database user is the install user ok Checking for prepared transactions ok *Clusters are compatible* Upgrade the Percona Distribution for PostgreSQL $ /usr/lib/postgresql/14/bin/pg_upgrade --old-datadir=/var/lib/postgresql/13/main \\ --new-datadir=/var/lib/postgresql/14/main \\ --old-bindir=/usr/lib/postgresql/13/bin \\ --new-bindir=/usr/lib/postgresql/14/bin \\ --old-options '-c config_file=/etc/postgresql/13/main/postgresql.conf' \\ --new-options '-c config_file=/etc/postgresql/14/main/postgresql.conf' \\ --link The --link flag creates hard links to the files on the old version cluster so you don\u2019t need to copy data. If you don\u2019t wish to use the --link option, make sure that you have enough disk space to store 2 copies of files for both old version and new version clusters. Go back to the regular user: exit The Percona Distribution for PostgreSQL 13 uses the 5432 port while the Percona Distribution for PostgreSQL 14 is set up to use the 5433 port by default. To start the Percona Distribution for PostgreSQL 14, swap ports in the configuration files of both versions. $ sudo vim /etc/postgresql/14/main/postgresql.conf $ port = 5433 # Change to 5432 here $ sudo vim /etc/postgresql/13/main/postgresql.conf $ port = 5432 # Change to 5433 here Start the postgreqsl service. $ sudo systemctl start postgresql.service Check the postgresql version. Log in as a postgres user $ sudo su postgres Check the database version $ psql -c \"SELECT version();\" Run the analyze_new_cluster.sh script $ tmp/analyze_new_cluster.sh $ #Logout $ exit Delete Percona Distribution for PostgreSQL 13 packages and configuration files Remove packages $ sudo apt remove percona-postgresql-13* percona-pgbackrest percona-patroni percona-pg-stat-monitor13 percona-pgaudit13-set-user percona-pgbadger percona-pgbouncer percona-postgresql-13-wal2json Remove old files $ rm -rf /etc/postgresql/13/main On Red Hat Enterprise Linux and CentOS using yum \u00b6 Important Run all commands as root or via sudo . Install Percona Distribution for PostgreSQL 14 packages Enable Percona repository using the percona-release utility: $ sudo percona-release setup ppg-14 Install Percona Distribution for PostgreSQL 14: $ sudo yum install percona-postgresql14-server Install components: $ sudo yum install percona-pgaudit \\ percona-pgbackrest \\ percona-pg_repack14 \\ percona-patroni \\ percona-pg-stat-monitor14 \\ percona-pgbadger \\ percona-pgaudit14_set_user \\ percona-pgbadger \\ percona-wal2json14 \\ percona-postgresql14-contrib Seealso Percona Documentation: Percona Software Repositories Documentation Installing Percona Distribution for PostgreSQL Set up Percona Distribution for PostgreSQL 14 cluster Log is as the postgres user sudo su postgres Set up locale settings export LC_ALL=\"en_US.UTF-8\" export LC_CTYPE=\"en_US.UTF-8\" Initialize cluster with the new data directory /usr/pgsql-14/bin/initdb -D /var/lib/pgsql/13/data Stop the postgresql 13 service $ systemctl stop postgresql-13 Run the database upgrade. Log in as the postgres user $ sudo su postgres Check the ability to upgrade Percona Distribution for PostgreSQL from 13 to 14: $ /usr/pgsql-14/bin/pg_upgrade \\ --old-bindir /usr/pgsql-13/bin \\ --new-bindir /usr/pgsql-14/bin \\ --old-datadir /var/lib/pgsql/13/data \\ --new-datadir /var/lib/pgsql/14/data \\ --link --check The --check flag here instructs pg_upgrade to only check the upgrade without changing any data. Sample output Performing Consistency Checks ----------------------------- Checking cluster versions ok Checking database user is the install user ok Checking database connection settings ok Checking for prepared transactions ok Checking for reg* data types in user tables ok Checking for contrib/isn with bigint-passing mismatch ok Checking for tables WITH OIDS ok Checking for invalid \"sql_identifier\" user columns ok Checking for presence of required libraries ok Checking database user is the install user ok Checking for prepared transactions ok *Clusters are compatible* Upgrade the Percona Distribution for PostgreSQL $ /usr/pgsql-14/bin/pg_upgrade \\ --old-bindir /usr/pgsql-13/bin \\ --new-bindir /usr/pgsql-14/bin \\ --old-datadir /var/lib/pgsql/13/data \\ --new-datadir /var/lib/pgsql/14/data \\ --link The --link flag creates hard links to the files on the old version cluster so you don\u2019t need to copy data. If you don\u2019t wish to use the --link option, make sure that you have enough disk space to store 2 copies of files for both old version and new version clusters. Start the postgresql 14 service. $ systemctl start postgresql-14 Check postgresql status $ systemctl status postgresql-14 Run the analyze_new_cluster.sh script Log in as the postgres user $ sudo su postgres Run the script $ ./analyze_new_cluster.sh Delete Percona Distribution for PostgreSQL 13 configuration files $ ./delete_old_cluster.sh Delete Percona Distribution for PostgreSQL 13 packages Remove packages $ sudo yum -y remove percona-postgresql13* Remove old files $ rm -rf /var/lib/pgsql/13/data","title":"Upgrading Percona Distribution for PostgreSQL from 13 to 14"},{"location":"major-upgrade.html#upgrading-percona-distribution-for-postgresql-from-13-to-14","text":"This document describes the in-place upgrade of Percona Distribution for PostgreSQL using the pg_upgrade tool. The in-place upgrade means installing a new version without removing the old version and keeping the data files on the server. Seealso pg_upgrade Documentation Similar to installing, we recommend you to upgrade Percona Distribution for PostgreSQL from Percona repositories. Important A major upgrade is a risky process because of many changes between versions and issues that might occur during or after the upgrade. Therefore, make sure to back up your data first. The backup tools are out of scope of this document. Use the backup tool of your choice. The general in-place upgrade flow for Percona Distribution for PostgreSQL is the following: Install Percona Distribution for PostgreSQL 14 packages. Stop the PostgreSQL service. Check the upgrade without modifying the data. Upgrade Percona Distribution for PostgreSQL. Start PostgreSQL service. Execute the analyze_new_cluster.sh script to generate statistics so the system is usable. Delete old packages and configuration files. The exact steps may differ depending on the package manager of your operating system.","title":"Upgrading Percona Distribution for PostgreSQL from 13 to 14"},{"location":"major-upgrade.html#on-debian-and-ubuntu-using-apt","text":"Important Run all commands as root or via sudo . Install Percona Distribution for PostgreSQL 14 packages. Enable Percona repository using the percona-release utility: $ sudo percona-release setup ppg-14 Install Percona Distribution for PostgreSQL 14 package: $ sudo apt install percona-postgresql-14 Install the components: $ sudo apt install percona-postgresql-14-repack \\ percona-postgresql-14-pgaudit \\ percona-pgbackrest \\ percona-patroni \\ percona-pgbadger \\ percona-pgaudit14-set-user \\ percona-pgbadger \\ percona-postgresql-14-wal2json \\ percona-pg-stat-monitor14 \\ percona-postgresql-contrib Seealso Percona Documentation: Percona Software Repositories Documentation Installing Percona Distribution for PostgreSQL Stop the postgresql service. $ sudo systemctl stop postgresql.service This stops both Percona Distribution for PostgreSQL 13 and 14. Run the database upgrade. Log in as the postgres user. $ sudo su postgres Change the current directory to the tmp directory where logs and some scripts will be recorded: cd tmp/ Check the ability to upgrade Percona Distribution for PostgreSQL from 13 to 14: $ /usr/lib/postgresql/14/bin/pg_upgrade --old-datadir=/var/lib/postgresql/13/main \\ --new-datadir=/var/lib/postgresql/14/main \\ --old-bindir=/usr/lib/postgresql/13/bin \\ --new-bindir=/usr/lib/postgresql/14/bin \\ --old-options '-c config_file=/etc/postgresql/13/main/postgresql.conf' \\ --new-options '-c config_file=/etc/postgresql/14/main/postgresql.conf' \\ --check The --check flag here instructs pg_upgrade to only check the upgrade without changing any data. Sample output Performing Consistency Checks ----------------------------- Checking cluster versions ok Checking database user is the install user ok Checking database connection settings ok Checking for prepared transactions ok Checking for reg* data types in user tables ok Checking for contrib/isn with bigint-passing mismatch ok Checking for tables WITH OIDS ok Checking for invalid \"sql_identifier\" user columns ok Checking for presence of required libraries ok Checking database user is the install user ok Checking for prepared transactions ok *Clusters are compatible* Upgrade the Percona Distribution for PostgreSQL $ /usr/lib/postgresql/14/bin/pg_upgrade --old-datadir=/var/lib/postgresql/13/main \\ --new-datadir=/var/lib/postgresql/14/main \\ --old-bindir=/usr/lib/postgresql/13/bin \\ --new-bindir=/usr/lib/postgresql/14/bin \\ --old-options '-c config_file=/etc/postgresql/13/main/postgresql.conf' \\ --new-options '-c config_file=/etc/postgresql/14/main/postgresql.conf' \\ --link The --link flag creates hard links to the files on the old version cluster so you don\u2019t need to copy data. If you don\u2019t wish to use the --link option, make sure that you have enough disk space to store 2 copies of files for both old version and new version clusters. Go back to the regular user: exit The Percona Distribution for PostgreSQL 13 uses the 5432 port while the Percona Distribution for PostgreSQL 14 is set up to use the 5433 port by default. To start the Percona Distribution for PostgreSQL 14, swap ports in the configuration files of both versions. $ sudo vim /etc/postgresql/14/main/postgresql.conf $ port = 5433 # Change to 5432 here $ sudo vim /etc/postgresql/13/main/postgresql.conf $ port = 5432 # Change to 5433 here Start the postgreqsl service. $ sudo systemctl start postgresql.service Check the postgresql version. Log in as a postgres user $ sudo su postgres Check the database version $ psql -c \"SELECT version();\" Run the analyze_new_cluster.sh script $ tmp/analyze_new_cluster.sh $ #Logout $ exit Delete Percona Distribution for PostgreSQL 13 packages and configuration files Remove packages $ sudo apt remove percona-postgresql-13* percona-pgbackrest percona-patroni percona-pg-stat-monitor13 percona-pgaudit13-set-user percona-pgbadger percona-pgbouncer percona-postgresql-13-wal2json Remove old files $ rm -rf /etc/postgresql/13/main","title":"On Debian and Ubuntu using apt"},{"location":"major-upgrade.html#on-red-hat-enterprise-linux-and-centos-using-yum","text":"Important Run all commands as root or via sudo . Install Percona Distribution for PostgreSQL 14 packages Enable Percona repository using the percona-release utility: $ sudo percona-release setup ppg-14 Install Percona Distribution for PostgreSQL 14: $ sudo yum install percona-postgresql14-server Install components: $ sudo yum install percona-pgaudit \\ percona-pgbackrest \\ percona-pg_repack14 \\ percona-patroni \\ percona-pg-stat-monitor14 \\ percona-pgbadger \\ percona-pgaudit14_set_user \\ percona-pgbadger \\ percona-wal2json14 \\ percona-postgresql14-contrib Seealso Percona Documentation: Percona Software Repositories Documentation Installing Percona Distribution for PostgreSQL Set up Percona Distribution for PostgreSQL 14 cluster Log is as the postgres user sudo su postgres Set up locale settings export LC_ALL=\"en_US.UTF-8\" export LC_CTYPE=\"en_US.UTF-8\" Initialize cluster with the new data directory /usr/pgsql-14/bin/initdb -D /var/lib/pgsql/13/data Stop the postgresql 13 service $ systemctl stop postgresql-13 Run the database upgrade. Log in as the postgres user $ sudo su postgres Check the ability to upgrade Percona Distribution for PostgreSQL from 13 to 14: $ /usr/pgsql-14/bin/pg_upgrade \\ --old-bindir /usr/pgsql-13/bin \\ --new-bindir /usr/pgsql-14/bin \\ --old-datadir /var/lib/pgsql/13/data \\ --new-datadir /var/lib/pgsql/14/data \\ --link --check The --check flag here instructs pg_upgrade to only check the upgrade without changing any data. Sample output Performing Consistency Checks ----------------------------- Checking cluster versions ok Checking database user is the install user ok Checking database connection settings ok Checking for prepared transactions ok Checking for reg* data types in user tables ok Checking for contrib/isn with bigint-passing mismatch ok Checking for tables WITH OIDS ok Checking for invalid \"sql_identifier\" user columns ok Checking for presence of required libraries ok Checking database user is the install user ok Checking for prepared transactions ok *Clusters are compatible* Upgrade the Percona Distribution for PostgreSQL $ /usr/pgsql-14/bin/pg_upgrade \\ --old-bindir /usr/pgsql-13/bin \\ --new-bindir /usr/pgsql-14/bin \\ --old-datadir /var/lib/pgsql/13/data \\ --new-datadir /var/lib/pgsql/14/data \\ --link The --link flag creates hard links to the files on the old version cluster so you don\u2019t need to copy data. If you don\u2019t wish to use the --link option, make sure that you have enough disk space to store 2 copies of files for both old version and new version clusters. Start the postgresql 14 service. $ systemctl start postgresql-14 Check postgresql status $ systemctl status postgresql-14 Run the analyze_new_cluster.sh script Log in as the postgres user $ sudo su postgres Run the script $ ./analyze_new_cluster.sh Delete Percona Distribution for PostgreSQL 13 configuration files $ ./delete_old_cluster.sh Delete Percona Distribution for PostgreSQL 13 packages Remove packages $ sudo yum -y remove percona-postgresql13* Remove old files $ rm -rf /var/lib/pgsql/13/data","title":"On Red Hat Enterprise Linux and CentOS using yum"},{"location":"minor-upgrade.html","text":"Minor Upgrade of Percona Distribution for PostgreSQL \u00b6 Minor releases of PostgreSQL include bug fixes and feature enhancements. We recommend that you keep your Percona Distribution for PostgreSQL updated to the latest minor version. Though minor upgrades do not change the behavior, we recommend you to back up your data first, in order to be on the safe side. Minor upgrade of Percona Distribution for PostgreSQL includes the following steps: Stopping the postgresql cluster; Installing new version packages; Restarting the postgresql cluster. Note These steps apply if you installed Percona Distribution for PostgreSQL from the Major Release repository. In this case, you are always upgraded to the latest available release. If you installed Percona Distribution for PostgreSQL from the Minor Release repository, you will need to enable a new version repository to upgrade. For more information about Percona repositories, refer to Installing Percona Distribution for PostgreSQL. Before the upgrade, update the percona-release utility to the latest version. This is required to install the new version packages of Percona Distribution for PostgreSQL. Refer to Percona Software Repositories Documentation for update instructions. Important Run all commands as root or via sudo . Stop the postgresql service. On Debian / Ubuntu: $ sudo systemctl stop postgresql.service On Red Hat Enterprise Linux / CentOS: $ sudo systemctl stop postgresql-14 Install new version packages. See Installing Percona Distribution for PostgreSQL . Restart the postgresql service. On Debian / Ubuntu: $ sudo systemctl start postgresql.service On Red Hat Enterprise Linux / CentOS: $ sudo systemctl start postgresql-14 If you wish to upgrade Percona Distribution for PostgreSQL to the major version, refer to Upgrading Percona Distribution for PostgreSQL from 13 to 14 .","title":"Minor Upgrade of Percona Distribution for PostgreSQL"},{"location":"minor-upgrade.html#minor-upgrade-of-percona-distribution-for-postgresql","text":"Minor releases of PostgreSQL include bug fixes and feature enhancements. We recommend that you keep your Percona Distribution for PostgreSQL updated to the latest minor version. Though minor upgrades do not change the behavior, we recommend you to back up your data first, in order to be on the safe side. Minor upgrade of Percona Distribution for PostgreSQL includes the following steps: Stopping the postgresql cluster; Installing new version packages; Restarting the postgresql cluster. Note These steps apply if you installed Percona Distribution for PostgreSQL from the Major Release repository. In this case, you are always upgraded to the latest available release. If you installed Percona Distribution for PostgreSQL from the Minor Release repository, you will need to enable a new version repository to upgrade. For more information about Percona repositories, refer to Installing Percona Distribution for PostgreSQL. Before the upgrade, update the percona-release utility to the latest version. This is required to install the new version packages of Percona Distribution for PostgreSQL. Refer to Percona Software Repositories Documentation for update instructions. Important Run all commands as root or via sudo . Stop the postgresql service. On Debian / Ubuntu: $ sudo systemctl stop postgresql.service On Red Hat Enterprise Linux / CentOS: $ sudo systemctl stop postgresql-14 Install new version packages. See Installing Percona Distribution for PostgreSQL . Restart the postgresql service. On Debian / Ubuntu: $ sudo systemctl start postgresql.service On Red Hat Enterprise Linux / CentOS: $ sudo systemctl start postgresql-14 If you wish to upgrade Percona Distribution for PostgreSQL to the major version, refer to Upgrading Percona Distribution for PostgreSQL from 13 to 14 .","title":"Minor Upgrade of Percona Distribution for PostgreSQL"},{"location":"pg-stat-monitor.html","text":"pg_stat_monitor \u00b6 Note This is a technical preview feature and it is subject to further changes. Overview \u00b6 pg_stat_monitor is a Query Performance Monitoring tool for PostgreSQL. It collects various statistics data such as query statistics, query plan, SQL comments and other performance insights. The collected data is aggregated and presented in a single view. This allows you to view queries from performance, application and analysis perspectives. pg_stat_monitor groups statistics data and writes it in a storage unit called bucket . The data is added and stored in a bucket for the defined period \u2013 the bucket lifetime. This allows you to identify performance issues and patterns based on time. You can specify the following: The number of buckets. Together they form a bucket chain. Bucket size. This is the amount of shared memory allocated for buckets. Memory is divided equally among buckets. Bucket lifetime. When a bucket lifetime expires, pg_stat_monitor resets all statistics and writes the data in the next bucket in the chain. When the last bucket\u2019s lifetime expires, pg_stat_monitor returns to the first bucket. Important The contents of the bucket will be overwritten. In order not to lose the data, make sure to read the bucket before pg_stat_monitor starts writing new data to it. Views \u00b6 pg_stat_monitor provides two views: pg_stat_monitor is the view where statistics data is presented. pg_stat_monitor_settings view shows available configuration options which you can change. pg_stat_monitor view \u00b6 The pg_stat_monitor view contains all the statistics collected and aggregated by the extension. This view contains one row for each distinct combination of metrics and whether it is a top-level statement or not (up to the maximum number of distinct statements that the module can track). For details about available metrics, refer to the pg_stat_monitor view reference . The following are the primary keys for pg_stat_monitor: bucket , userid , dbid , client_ip , application_name . A new row is created for each key in the pg_stat_monitor view. For security reasons, only superusers and members of the pg_read_all_stats role are allowed to see the SQL text and queryid of queries executed by other users. Other users can see the statistics, however, if the view has been installed in their database. pg_stat_monitor_settings view \u00b6 The pg_stat_monitor_settings view shows one row per pg_stat_monitor configuration parameter. It displays configuration parameter name, value, default value, description, minimum and maximum values, and whether a restart is required for a change in value to be effective. To learn more, see the Changing the configuration section. Installation \u00b6 This section describes how to install pg_stat_monitor from Percona repositories. To learn about other installation methods, see the Installation section in pg_stat_monitor documentation. Assumptions : We assume that you have installed percona-release utility and enabled the Percona Distribution for PostgreSQL repository To install pg_stat_monitor , run the following command: On Debian and Ubuntu: $ sudo apt install percona-pg-stat-monitor14 On Red Hat Enterprise Linux and CentOS: $ sudo yum install percona-pg-stat-monitor14 Setup \u00b6 pg_stat_monitor requires additional setup in order to use it with PostgreSQL. The setup steps are the following: Add pg_stat_monitor in the shared_preload_libraries configuration parameter. The recommended way to modify PostgreSQL configuration file is using the ALTER SYSTEM command. Connect to psql and use the following command: $ ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_monitor'; The parameter value is written to the postgresql.auto.conf file which is read in addition with postgresql.conf file. Note If you\u2019ve added other values to the shared_preload_libraries parameter, list all of them separated by commas for the ALTER SYSTEM command. For example, ALTER SYSTEM SET shared_preload_libraries = \u2018foo, bar, pg_stat_monitor\u2019 . Start or restart the postgresql instance to enable pg_stat_monitor . Use the following command for restart: On Debian and Ubuntu: $ sudo systemctl restart postgresql.service On Red Hat Enterprise Linux and CentOS: $ sudo systemctl restart postgresql-14 Create the extension. Connect to psql and use the following command: $ CREATE EXTENSION pg_stat_monitor; Note By default, the extension is created against the postgres database. You need to create the extension on every database where you want to collect statistics. Tip To check the version of the extension, run the following command in the psql session: SELECT pg_stat_monitor_version () ; Usage \u00b6 For example, to view the IP address of the client application that made the query, run the following command: SELECT DISTINCT userid::regrole, pg_stat_monitor.datname, substr(query,0, 50) AS query, calls, bucket, bucket_start_time, queryid, client_ip FROM pg_stat_monitor, pg_database WHERE pg_database.oid = oid; userid | datname | query | calls | client_ip ----------+----------+---------------------------------------------------+-------+----------- postgres | postgres | select bucket, bucket_start_time, query,calls fro | 1 | 127.0.0.1 postgres | postgres | SELECT c.relchecks, c.relkind, c.relhasindex, c.r | 1 | 127.0.0.1 postgres | postgres | SELECT userid, total_time, min_time, max_time, | 1 | 127.0.0.1 Find more usage examples in the pg_stat_monitor User Guide . Changing the configuration \u00b6 Run the following query to list available configuration parameters. $ SELECT name,description FROM pg_stat_monitor_settings; Output name | description -----------------------------------------------+------------------------------------------------------------------- pg_stat_monitor.pgsm_max | Sets the maximum number of statements tracked by pg_stat_monitor. pg_stat_monitor.pgsm_query_max_len | Sets the maximum length of query. pg_stat_monitor.pgsm_enable | Enable/Disable statistics collector. pg_stat_monitor.pgsm_track_utility | Selects whether utility commands are tracked. pg_stat_monitor.pgsm_normalized_query | Selects whether save query in normalized format. pg_stat_monitor.pgsm_max_buckets | Sets the maximum number of buckets. pg_stat_monitor.pgsm_bucket_time | Sets the time in seconds per bucket. pg_stat_monitor.pgsm_histogram_min | Sets the time in millisecond. pg_stat_monitor.pgsm_histogram_max | Sets the time in millisecond. pg_stat_monitor.pgsm_histogram_buckets | Sets the maximum number of histogram buckets pg_stat_monitor.pgsm_query_shared_buffer | Sets the maximum size of shared memory in (MB) used for query tracked by pg_stat_monitor. pg_stat_monitor.pgsm_overflow_target | Sets the overflow target for pg_stat_monitor pg_stat_monitor.pgsm_enable_query_plan | Enable/Disable query plan monitoring pg_stat_monitor.pgsm_track_planning | Selects whether planning statistics are tracked. You can change a parameter by setting a new value in the configuration file. Some parameters require server restart to apply a new value. For others, configuration reload is enough. Refer to the configuration section of the pg_stat_monitor documentation for the parameters\u2019 description, how you can change their values and if the server restart is required to apply them. As an example, let\u2019s set the bucket lifetime from default 60 seconds to 100 seconds. Use the ALTER SYSTEM command: $ ALTER SYSTEM set pg_stat_monitor.pgsm_bucket_time = 100; Restart the server to apply the change: On Debian and Ubuntu $ sudo systemctl restart restart postgresql.service On Red Hat Enterprise Linux and CentOS: $ sudo systemctl restart postgresql-14 Verify the updated parameter: $ SELECT name, value FROM pg_stat_monitor_settings WHERE name = 'pg_stat_monitor.pgsm_bucket_time'; name | value ----------------------------------+------- pg_stat_monitor.pgsm_bucket_time | 100 Seealso pg_stat_monitor Documentation Percona Blog: pg_stat_monitor: A New Way Of Looking At PostgreSQL Metrics Improve PostgreSQL Query Performance Insights with pg_stat_monitor","title":"pg_stat_monitor"},{"location":"pg-stat-monitor.html#pg_stat_monitor","text":"Note This is a technical preview feature and it is subject to further changes.","title":"pg_stat_monitor"},{"location":"pg-stat-monitor.html#overview","text":"pg_stat_monitor is a Query Performance Monitoring tool for PostgreSQL. It collects various statistics data such as query statistics, query plan, SQL comments and other performance insights. The collected data is aggregated and presented in a single view. This allows you to view queries from performance, application and analysis perspectives. pg_stat_monitor groups statistics data and writes it in a storage unit called bucket . The data is added and stored in a bucket for the defined period \u2013 the bucket lifetime. This allows you to identify performance issues and patterns based on time. You can specify the following: The number of buckets. Together they form a bucket chain. Bucket size. This is the amount of shared memory allocated for buckets. Memory is divided equally among buckets. Bucket lifetime. When a bucket lifetime expires, pg_stat_monitor resets all statistics and writes the data in the next bucket in the chain. When the last bucket\u2019s lifetime expires, pg_stat_monitor returns to the first bucket. Important The contents of the bucket will be overwritten. In order not to lose the data, make sure to read the bucket before pg_stat_monitor starts writing new data to it.","title":"Overview"},{"location":"pg-stat-monitor.html#views","text":"pg_stat_monitor provides two views: pg_stat_monitor is the view where statistics data is presented. pg_stat_monitor_settings view shows available configuration options which you can change.","title":"Views"},{"location":"pg-stat-monitor.html#pg_stat_monitor-view","text":"The pg_stat_monitor view contains all the statistics collected and aggregated by the extension. This view contains one row for each distinct combination of metrics and whether it is a top-level statement or not (up to the maximum number of distinct statements that the module can track). For details about available metrics, refer to the pg_stat_monitor view reference . The following are the primary keys for pg_stat_monitor: bucket , userid , dbid , client_ip , application_name . A new row is created for each key in the pg_stat_monitor view. For security reasons, only superusers and members of the pg_read_all_stats role are allowed to see the SQL text and queryid of queries executed by other users. Other users can see the statistics, however, if the view has been installed in their database.","title":"pg_stat_monitor view"},{"location":"pg-stat-monitor.html#pg_stat_monitor_settings-view","text":"The pg_stat_monitor_settings view shows one row per pg_stat_monitor configuration parameter. It displays configuration parameter name, value, default value, description, minimum and maximum values, and whether a restart is required for a change in value to be effective. To learn more, see the Changing the configuration section.","title":"pg_stat_monitor_settings view"},{"location":"pg-stat-monitor.html#installation","text":"This section describes how to install pg_stat_monitor from Percona repositories. To learn about other installation methods, see the Installation section in pg_stat_monitor documentation. Assumptions : We assume that you have installed percona-release utility and enabled the Percona Distribution for PostgreSQL repository To install pg_stat_monitor , run the following command: On Debian and Ubuntu: $ sudo apt install percona-pg-stat-monitor14 On Red Hat Enterprise Linux and CentOS: $ sudo yum install percona-pg-stat-monitor14","title":"Installation"},{"location":"pg-stat-monitor.html#setup","text":"pg_stat_monitor requires additional setup in order to use it with PostgreSQL. The setup steps are the following: Add pg_stat_monitor in the shared_preload_libraries configuration parameter. The recommended way to modify PostgreSQL configuration file is using the ALTER SYSTEM command. Connect to psql and use the following command: $ ALTER SYSTEM SET shared_preload_libraries = 'pg_stat_monitor'; The parameter value is written to the postgresql.auto.conf file which is read in addition with postgresql.conf file. Note If you\u2019ve added other values to the shared_preload_libraries parameter, list all of them separated by commas for the ALTER SYSTEM command. For example, ALTER SYSTEM SET shared_preload_libraries = \u2018foo, bar, pg_stat_monitor\u2019 . Start or restart the postgresql instance to enable pg_stat_monitor . Use the following command for restart: On Debian and Ubuntu: $ sudo systemctl restart postgresql.service On Red Hat Enterprise Linux and CentOS: $ sudo systemctl restart postgresql-14 Create the extension. Connect to psql and use the following command: $ CREATE EXTENSION pg_stat_monitor; Note By default, the extension is created against the postgres database. You need to create the extension on every database where you want to collect statistics. Tip To check the version of the extension, run the following command in the psql session: SELECT pg_stat_monitor_version () ;","title":"Setup"},{"location":"pg-stat-monitor.html#usage","text":"For example, to view the IP address of the client application that made the query, run the following command: SELECT DISTINCT userid::regrole, pg_stat_monitor.datname, substr(query,0, 50) AS query, calls, bucket, bucket_start_time, queryid, client_ip FROM pg_stat_monitor, pg_database WHERE pg_database.oid = oid; userid | datname | query | calls | client_ip ----------+----------+---------------------------------------------------+-------+----------- postgres | postgres | select bucket, bucket_start_time, query,calls fro | 1 | 127.0.0.1 postgres | postgres | SELECT c.relchecks, c.relkind, c.relhasindex, c.r | 1 | 127.0.0.1 postgres | postgres | SELECT userid, total_time, min_time, max_time, | 1 | 127.0.0.1 Find more usage examples in the pg_stat_monitor User Guide .","title":"Usage"},{"location":"pg-stat-monitor.html#changing-the-configuration","text":"Run the following query to list available configuration parameters. $ SELECT name,description FROM pg_stat_monitor_settings; Output name | description -----------------------------------------------+------------------------------------------------------------------- pg_stat_monitor.pgsm_max | Sets the maximum number of statements tracked by pg_stat_monitor. pg_stat_monitor.pgsm_query_max_len | Sets the maximum length of query. pg_stat_monitor.pgsm_enable | Enable/Disable statistics collector. pg_stat_monitor.pgsm_track_utility | Selects whether utility commands are tracked. pg_stat_monitor.pgsm_normalized_query | Selects whether save query in normalized format. pg_stat_monitor.pgsm_max_buckets | Sets the maximum number of buckets. pg_stat_monitor.pgsm_bucket_time | Sets the time in seconds per bucket. pg_stat_monitor.pgsm_histogram_min | Sets the time in millisecond. pg_stat_monitor.pgsm_histogram_max | Sets the time in millisecond. pg_stat_monitor.pgsm_histogram_buckets | Sets the maximum number of histogram buckets pg_stat_monitor.pgsm_query_shared_buffer | Sets the maximum size of shared memory in (MB) used for query tracked by pg_stat_monitor. pg_stat_monitor.pgsm_overflow_target | Sets the overflow target for pg_stat_monitor pg_stat_monitor.pgsm_enable_query_plan | Enable/Disable query plan monitoring pg_stat_monitor.pgsm_track_planning | Selects whether planning statistics are tracked. You can change a parameter by setting a new value in the configuration file. Some parameters require server restart to apply a new value. For others, configuration reload is enough. Refer to the configuration section of the pg_stat_monitor documentation for the parameters\u2019 description, how you can change their values and if the server restart is required to apply them. As an example, let\u2019s set the bucket lifetime from default 60 seconds to 100 seconds. Use the ALTER SYSTEM command: $ ALTER SYSTEM set pg_stat_monitor.pgsm_bucket_time = 100; Restart the server to apply the change: On Debian and Ubuntu $ sudo systemctl restart restart postgresql.service On Red Hat Enterprise Linux and CentOS: $ sudo systemctl restart postgresql-14 Verify the updated parameter: $ SELECT name, value FROM pg_stat_monitor_settings WHERE name = 'pg_stat_monitor.pgsm_bucket_time'; name | value ----------------------------------+------- pg_stat_monitor.pgsm_bucket_time | 100 Seealso pg_stat_monitor Documentation Percona Blog: pg_stat_monitor: A New Way Of Looking At PostgreSQL Metrics Improve PostgreSQL Query Performance Insights with pg_stat_monitor","title":"Changing the configuration"},{"location":"release-notes-v14.1.html","text":"Percona Distribution for PostgreSQL 14.1 \u00b6 Date: November 22, 2021 Installation: Installing Percona Distribution for PostgreSQL Upgrade: Upgrading Percona Distribution for PostgreSQL from 13 to 14 We are pleased to announce the launch of Percona Distribution for PostgreSQL 14.1 - a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This release of Percona Distribution for PostgreSQL is based on PostgreSQL 14.1 . Release Highlights \u00b6 PostgreSQL 14 provides an extensive set of new features and enhancements to security, performance, usability for client applications and more. Most notable of them include the following: Expired B-tree index entries can now be detected and removed between vacuum runs. This results in lesser number of page splits and reduces the index bloat. The vacuum process now deletes B-tree pages in a single cycle, without marking them as deleted during the first run. This speeds up free space cleanup. Support for subscripts in JSON is added to simplify data retrieval using a commonly recognized syntax. Stored procedures can accept OUT parameters. The libpq library now supports the pipeline mode. Previously, the client applications waited for a transaction to be completed before sending the next one. The pipeline mode allows the applications to send multiple transactions at the same time thus boosting performance. Large transactions are now streamed to subscribers in-progress, thus increasing the performance. This improvement applies to logical replication API as well. LZ4 compression is added for TOAST operations. This speeds up large data processing. SCRAM is made the default authentication mechanism. This mechanism improves security and simplifies regulatory compliance for data security. Seealso PostgreSQL 14.1 release notes Percona Blog: PostgreSQL 14 - Performance, Security, Usability, and Observability Using the Range and the New Multirange Data Type in PostgreSQL 14 Using New JSON Syntax in PostgreSQL 14 - Update The following is the list of extensions available in Percona Distribution for PostgreSQL. Extension Version Description Patroni 2.1.1 a HA (High Availability) solution for PostgreSQL Pgaudit 1.6.0 provides detailed session or object audit logging via the standard logging facility provided by PostgreSQL pgAudit set user 3.0.0 provides an additional layer of logging and control when unprivileged users must escalate themselves to superuser or object owner roles in order to perform needed maintenance tasks. pgBackRest 2.36 a backup and restore solution for PostgreSQL pgBadger 11.6 a fast PostgreSQL Log Analyzer. pgBouncer 1.16.1 lightweight connection pooler for PostgreSQL pg_repack 1.4.7 rebuilds PostgreSQL database objects pg_stat_monitor 1.0.0 - Beta2 collects and aggregates statistics for PostgreSQL and provides histogram information. PostgreSQL Common 230 PostgreSQL database-cluster manager. It provides a structure under which multiple versions of PostgreSQL may be installed and/or multiple clusters maintained at one time. wal2json 2.4 a PostgreSQL logical decoding JSON output plugin. Percona Distribution for PostgreSQL also includes the following packages: llvm 12.0.1 packages for Red Hat Enterprise Linux 8 / CentOS 8. This fixes compatibility issues with LLVM from upstream. supplemental ETCD packages which can be used for setting up Patroni clusters. These packages are available for the following operating systems: Operating System Package Version Description CentOS 7 python3-python-etcd 0.4.3 A Python client for ETCD CentOS 8 etcd 3.3.11 A consistent, distributed key-value store python3-python-etcd 0.4.3 A Python client for ETCD Debian 9 (\u2018stretch\u2019) etcd 3.3.11 A consistent, distributed key-value store python3-etcd 0.4.3 A Python client for ETCD Percona Distribution for PostgreSQL is also shipped with the libpq library. It contains \u201ca set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries.\u201d","title":"Percona Distribution for PostgreSQL 14.1"},{"location":"release-notes-v14.1.html#percona-distribution-for-postgresql-141","text":"Date: November 22, 2021 Installation: Installing Percona Distribution for PostgreSQL Upgrade: Upgrading Percona Distribution for PostgreSQL from 13 to 14 We are pleased to announce the launch of Percona Distribution for PostgreSQL 14.1 - a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This release of Percona Distribution for PostgreSQL is based on PostgreSQL 14.1 .","title":"Percona Distribution for PostgreSQL 14.1"},{"location":"release-notes-v14.1.html#release-highlights","text":"PostgreSQL 14 provides an extensive set of new features and enhancements to security, performance, usability for client applications and more. Most notable of them include the following: Expired B-tree index entries can now be detected and removed between vacuum runs. This results in lesser number of page splits and reduces the index bloat. The vacuum process now deletes B-tree pages in a single cycle, without marking them as deleted during the first run. This speeds up free space cleanup. Support for subscripts in JSON is added to simplify data retrieval using a commonly recognized syntax. Stored procedures can accept OUT parameters. The libpq library now supports the pipeline mode. Previously, the client applications waited for a transaction to be completed before sending the next one. The pipeline mode allows the applications to send multiple transactions at the same time thus boosting performance. Large transactions are now streamed to subscribers in-progress, thus increasing the performance. This improvement applies to logical replication API as well. LZ4 compression is added for TOAST operations. This speeds up large data processing. SCRAM is made the default authentication mechanism. This mechanism improves security and simplifies regulatory compliance for data security. Seealso PostgreSQL 14.1 release notes Percona Blog: PostgreSQL 14 - Performance, Security, Usability, and Observability Using the Range and the New Multirange Data Type in PostgreSQL 14 Using New JSON Syntax in PostgreSQL 14 - Update The following is the list of extensions available in Percona Distribution for PostgreSQL. Extension Version Description Patroni 2.1.1 a HA (High Availability) solution for PostgreSQL Pgaudit 1.6.0 provides detailed session or object audit logging via the standard logging facility provided by PostgreSQL pgAudit set user 3.0.0 provides an additional layer of logging and control when unprivileged users must escalate themselves to superuser or object owner roles in order to perform needed maintenance tasks. pgBackRest 2.36 a backup and restore solution for PostgreSQL pgBadger 11.6 a fast PostgreSQL Log Analyzer. pgBouncer 1.16.1 lightweight connection pooler for PostgreSQL pg_repack 1.4.7 rebuilds PostgreSQL database objects pg_stat_monitor 1.0.0 - Beta2 collects and aggregates statistics for PostgreSQL and provides histogram information. PostgreSQL Common 230 PostgreSQL database-cluster manager. It provides a structure under which multiple versions of PostgreSQL may be installed and/or multiple clusters maintained at one time. wal2json 2.4 a PostgreSQL logical decoding JSON output plugin. Percona Distribution for PostgreSQL also includes the following packages: llvm 12.0.1 packages for Red Hat Enterprise Linux 8 / CentOS 8. This fixes compatibility issues with LLVM from upstream. supplemental ETCD packages which can be used for setting up Patroni clusters. These packages are available for the following operating systems: Operating System Package Version Description CentOS 7 python3-python-etcd 0.4.3 A Python client for ETCD CentOS 8 etcd 3.3.11 A consistent, distributed key-value store python3-python-etcd 0.4.3 A Python client for ETCD Debian 9 (\u2018stretch\u2019) etcd 3.3.11 A consistent, distributed key-value store python3-etcd 0.4.3 A Python client for ETCD Percona Distribution for PostgreSQL is also shipped with the libpq library. It contains \u201ca set of library functions that allow client programs to pass queries to the PostgreSQL backend server and to receive the results of these queries.\u201d","title":"Release Highlights"},{"location":"release-notes-v14.1.upd.html","text":"Percona Distribution for PostgreSQL 14.1 Update \u00b6 Date: December 2, 2021 Installation: Installing Percona Distribution for PostgreSQL Percona Distribution for PostgreSQL is a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This update of Percona Distribution for PostgreSQL fixes the inability of a user to upgrade the postgresql-common package during the major upgrade to version 14.1 on DEB-based systems. Bugs Fixed \u00b6 DISTPG-358 : \u201cDevice or resource busy\u201d error during the major upgrade of PostgreSQL on Ubuntu","title":"Percona Distribution for PostgreSQL 14.1 Update"},{"location":"release-notes-v14.1.upd.html#percona-distribution-for-postgresql-141-update","text":"Date: December 2, 2021 Installation: Installing Percona Distribution for PostgreSQL Percona Distribution for PostgreSQL is a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This update of Percona Distribution for PostgreSQL fixes the inability of a user to upgrade the postgresql-common package during the major upgrade to version 14.1 on DEB-based systems.","title":"Percona Distribution for PostgreSQL 14.1 Update"},{"location":"release-notes-v14.1.upd.html#bugs-fixed","text":"DISTPG-358 : \u201cDevice or resource busy\u201d error during the major upgrade of PostgreSQL on Ubuntu","title":"Bugs Fixed"},{"location":"release-notes-v14.1.upd2.html","text":"Percona Distribution for PostgreSQL 14.1 Second Update \u00b6 Date: December 7, 2021 Installation: Installing Percona Distribution for PostgreSQL Percona Distribution for PostgreSQL is a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This update of Percona Distribution for PostgreSQL includes the latest version of pg_stat_monitor 1.0.0-RC - the statistics collection tool for PostgreSQL. We welcome your feedback on your experience with pg_stat_monitor in the public JIRA project .","title":"Percona Distribution for PostgreSQL 14.1 Second Update"},{"location":"release-notes-v14.1.upd2.html#percona-distribution-for-postgresql-141-second-update","text":"Date: December 7, 2021 Installation: Installing Percona Distribution for PostgreSQL Percona Distribution for PostgreSQL is a collection of tools to assist you in managing PostgreSQL. Percona Distribution for PostgreSQL installs PostgreSQL and complements it by a selection of extensions that enable solving essential practical tasks efficiently. This update of Percona Distribution for PostgreSQL includes the latest version of pg_stat_monitor 1.0.0-RC - the statistics collection tool for PostgreSQL. We welcome your feedback on your experience with pg_stat_monitor in the public JIRA project .","title":"Percona Distribution for PostgreSQL 14.1 Second Update"},{"location":"release-notes.html","text":"Release Notes \u00b6 Percona Distribution for PostgreSQL 14.1 Second Update Percona Distribution for PostgreSQL 14.1 Update Percona Distribution for PostgreSQL 14.1","title":"Release Notes"},{"location":"release-notes.html#release-notes","text":"Percona Distribution for PostgreSQL 14.1 Second Update Percona Distribution for PostgreSQL 14.1 Update Percona Distribution for PostgreSQL 14.1","title":"Release Notes"},{"location":"uninstalling.html","text":"Uninstalling Percona Distribution for PostgreSQL \u00b6 To uninstall Percona Distribution for PostgreSQL, remove all the installed packages and data / configuration files. NOTE : Should you need the data files later, back up your data before uninstalling Percona Distribution for PostgreSQL. On Debian and Ubuntu using apt \u00b6 To uninstall Percona Distribution for PostgreSQL on platforms that use apt package manager such as Debian or Ubuntu, complete the following steps. Run all commands as root or via sudo . Stop the Percona Distribution for PostgreSQL service. $ sudo systemctl stop postgresql.service Remove the percona-postgresql packages. $ sudo apt remove percona-postgresql-13* percona-patroni percona-pgbackrest percona-pgbadger percona-pgbouncer Remove configuration and data files. $ rm -rf /etc/postgresql/13/main On Red Hat Enterprise Linux and CentOS using yum \u00b6 To uninstall Percona Distribution for PostgreSQL on platforms that use yum package manager such as Red Hat Enterprise Linux or CentOS, complete the following steps. Run all commands as root or via sudo . Stop the Percona Distribution for PostgreSQL service. $ sudo systemctl stop postgresql-13 Remove the percona-postgresql packages $ sudo yum remove percona-postgresql13* percona-pgbadger Remove configuration and data files $ rm -rf /var/lib/pgsql/13/data","title":"Uninstall"},{"location":"uninstalling.html#uninstalling-percona-distribution-for-postgresql","text":"To uninstall Percona Distribution for PostgreSQL, remove all the installed packages and data / configuration files. NOTE : Should you need the data files later, back up your data before uninstalling Percona Distribution for PostgreSQL.","title":"Uninstalling Percona Distribution for PostgreSQL"},{"location":"uninstalling.html#on-debian-and-ubuntu-using-apt","text":"To uninstall Percona Distribution for PostgreSQL on platforms that use apt package manager such as Debian or Ubuntu, complete the following steps. Run all commands as root or via sudo . Stop the Percona Distribution for PostgreSQL service. $ sudo systemctl stop postgresql.service Remove the percona-postgresql packages. $ sudo apt remove percona-postgresql-13* percona-patroni percona-pgbackrest percona-pgbadger percona-pgbouncer Remove configuration and data files. $ rm -rf /etc/postgresql/13/main","title":"On Debian and Ubuntu using apt"},{"location":"uninstalling.html#on-red-hat-enterprise-linux-and-centos-using-yum","text":"To uninstall Percona Distribution for PostgreSQL on platforms that use yum package manager such as Red Hat Enterprise Linux or CentOS, complete the following steps. Run all commands as root or via sudo . Stop the Percona Distribution for PostgreSQL service. $ sudo systemctl stop postgresql-13 Remove the percona-postgresql packages $ sudo yum remove percona-postgresql13* percona-pgbadger Remove configuration and data files $ rm -rf /var/lib/pgsql/13/data","title":"On Red Hat Enterprise Linux and CentOS using yum"}]}